package com.example.shopping;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
                .authorizeRequests(requests -> requests
                        .requestMatchers("/h2-console/**").permitAll()  // Permit access to H2 console
                        .requestMatchers("/api/users/signup", "/api/users/login","/api/users/deleteUser/{userId}").permitAll()  // Permit access to signup and login APIs
                        .requestMatchers("/api/item").permitAll() // Allow access to /api/item without authentication
                        .requestMatchers("/api/users/**").authenticated() // Require authentication for /api/users/**
                        .anyRequest().permitAll()) // All other requests are permitted without authentication
                .formLogin(login -> login.disable()) // Disable default login form
                .logout(logout -> logout.permitAll()); // Allow logout endpoint

        http.headers().frameOptions().sameOrigin(); // Allow H2 console to be accessed

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
