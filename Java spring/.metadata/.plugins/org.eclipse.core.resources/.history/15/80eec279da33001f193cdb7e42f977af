// OrderService.java
package com.example.shopping.service;
import com.example.shopping.model.Order;
import com.example.shopping.model.Item;
import com.example.shopping.repository.ItemRepository;
import com.example.shopping.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class OrderService {

    @Autowired
    private OrderRepository orderRepository;
    private ItemRepository itemRepository;

    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    public List<Order> getOrdersByUserId(Long userId) {
        return orderRepository.findByUserId(userId);
    }

    public Order createOrder(Long userId) {
        Order order = new Order();
        order.setUserId(userId);
        order.setStatus("OPEN");
        return orderRepository.save(order);
    }

    public Order updateOrder(Long orderId, Long userId, Order order) {
        Order existingOrder = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found"));

        if (!existingOrder.getUserId().equals(userId)) {
            throw new RuntimeException("User ID does not match the order's user ID");
        }

        existingOrder.setOrderDate(order.getOrderDate());
        existingOrder.setShippingAddress(order.getShippingAddress());
        existingOrder.setTotalPrice(order.getTotalPrice());
        existingOrder.setStatus(order.getStatus());
        existingOrder.setItems(order.getItems());
        return orderRepository.save(existingOrder);
    }

    public void deleteOrder(Long orderId, Long userId) {
        Order existingOrder = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found"));

        if (!existingOrder.getUserId().equals(userId)) {
            throw new RuntimeException("User ID does not match the order's user ID");
        }

        orderRepository.deleteById(orderId);
    }

    public Order addItemToOrder(Long orderId, Long userId, Item item) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found"));

        if (!order.getUserId().equals(userId)) {
            throw new RuntimeException("User ID does not match the order's user ID");
        }

        order.getItems().add(item);
        return orderRepository.save(order);
    }

    public Order removeItemFromOrder(Long userId, Long orderId, Long itemId) {
        System.out.println("User ID: " + userId);
        System.out.println("Order ID: " + orderId);
        System.out.println("Item ID: " + itemId);

        Order order = orderRepository.findById(orderId)
            .orElseThrow(() -> new RuntimeException("Order not found"));

        System.out.println("Order User ID: " + order.getUserId());

        if (!order.getUserId().equals(userId)) {
            throw new RuntimeException("User ID does not match the order's user ID");
        }

        Item item = itemRepository.findById(itemId)
            .orElseThrow(() -> new RuntimeException("Item not found"));

        order.getItems().remove(itemId);
        return orderRepository.save(order);
    }



    public Order getOpenOrderByUserId(Long userId) {
        return orderRepository.findOpenOrderByUserId(userId);
    }
}
